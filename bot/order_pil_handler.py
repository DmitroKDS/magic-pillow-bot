from aiogram import Router, types, F
from aiogram.filters import CommandStart, CommandObject

from bot.functions.create_log import create_log

from aiogram.fsm.context import FSMContext
from bot.functions.bot_states import pil_other_count

from bot.functions.create_offer import create_offer_url

from mysql.connector.aio import connect
import config


order_pil_handler_router = Router()


@order_pil_handler_router.callback_query(F.data == 'order_pil')
async def order_pil(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    """
    Order pil

    Button: order pil
    """
    await create_log(callback_query.message, "Order pil")

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ì—ñ–≥–∞–Ω—Ç—Å—å–∫–∞', callback_data='pil_size_200')],
            [types.InlineKeyboardButton(text='–ù–∞–π–±—ñ–ª—å—à–∞', callback_data='pil_size_150')],
            [types.InlineKeyboardButton(text='–í–µ–ª–∏–∫–∞', callback_data='pil_size_100')],
            [types.InlineKeyboardButton(text='–°–µ—Ä–µ–¥–Ω—è', callback_data='pil_size_65')],
            [types.InlineKeyboardButton(text='–ú–∞–ª–µ–Ω—å–∫–∞', callback_data='pil_size_35')],
            [types.InlineKeyboardButton(text='–•–æ—á—É —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä', callback_data='pil_other_size')]
        ]
    )

    await callback_query.message.answer(
        """üéâ –¶–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø–æ–¥—É—à–æ–∫
–ú–∞–ª–µ–Ω—å–∫–∞ (35 —Å–º –∑ –±—ñ–ª—å—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏) - –≤–∞—Ä—Ç—ñ—Å—Ç—å ? –≥—Ä–Ω
–°–µ—Ä–µ–¥–Ω—è (65 —Å–º –∑ –±—ñ–ª—å—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏) - –≤–∞—Ä—Ç—ñ—Å—Ç—å ? –≥—Ä–Ω
–í–µ–ª–∏–∫–∞ (100 —Å–º –∑ –±—ñ–ª—å—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏) - –≤–∞—Ä—Ç—ñ—Å—Ç—å ? –≥—Ä–Ω
–ù–∞–π–±—ñ–ª—å—à–∞ (150 —Å–º –∑ –±—ñ–ª—å—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏) - –≤–∞—Ä—Ç—ñ—Å—Ç—å ? –≥—Ä–Ω
–ì—ñ–≥–∞–Ω—Ç—Å—å–∫–∞ (200 —Å–º –∑ –±—ñ–ª—å—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏) - –≤–∞—Ä—Ç—ñ—Å—Ç—å ? –≥—Ä–Ω

–Ø–∫–∏–π —Ä–æ–∑–º—ñ—Ä –æ–±–∏—Ä–∞—î—à? üòä""",
        reply_markup=inline_buttons
    )

@order_pil_handler_router.callback_query(F.data == 'pil_other_size')
async def pil_other_size(callback_query: types.CallbackQuery):
    """
    Choose other size

    Button: other size
    """
    await create_log(callback_query.message, "Pil other size")

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f'{size}', callback_data=f'pil_size_{size}')] for size in range(0, 201, 10)
        ]
    )

    await callback_query.message.answer(
        """–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä üòä""",
        reply_markup=inline_buttons
    )


@order_pil_handler_router.callback_query(F.data.contains('pil_size_'))
async def pil_count(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Choose pil count

    Button: pil size
    """
    await create_log(callback_query.message, "Pil count")

    pil_size = int(callback_query.data.split('_')[-1])
    await state.update_data(pil_size=pil_size)

    await callback_query.message.answer(
        f'–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–º—ñ—Ä {pil_size} —Å–º. üòä'
    )


    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='1', callback_data=f'pil_count_1')],
            [types.InlineKeyboardButton(text='2', callback_data=f'pil_count_2')],
            [types.InlineKeyboardButton(text='3', callback_data=f'pil_count_3')],
            [types.InlineKeyboardButton(text='–°–≤–æ—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å', callback_data=f'pil_other_count')]
        ]
    )

    await callback_query.message.answer(
        """–¢–µ–ø–µ—Ä –≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è–∫–∞ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞:""",
        reply_markup=inline_buttons
    )

@order_pil_handler_router.callback_query(F.data == 'pil_other_count')
async def pil_other_count_ask(callback_query: types.CallbackQuery, state: FSMContext):
    """
    Choose custom number

    Button: custom number
    """
    await create_log(callback_query.message, "pil other count ask")

    await callback_query.message.answer(
        """–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å üòä"""
    )

    await state.set_state(pil_other_count.is_waiting)


@order_pil_handler_router.message(
    (F.content_type == "text"),
    pil_other_count.is_waiting
)
@order_pil_handler_router.callback_query(F.data.contains('pil_count_'))
async def pil_other_count_submit(message: types.Message | types.CallbackQuery, state: FSMContext):
    """
    Submit pil other count

    Message: other count
    """
    if not(isinstance(message, types.Message) and message.text.isdigit() and int(message.text) > 0) and not isinstance(message, types.CallbackQuery):
        await message.answer(
            f'–í–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Ü–∏—Ñ—Ä—É'
        )
        return
    
    if isinstance(message, types.CallbackQuery):
        pil_count = int(message.data.split('_')[-1])
        message = message.message
    else:
        pil_count = int(message.text)

    await create_log(message, "pil count submit")

    pil_size  = (await state.get_data())["pil_size"]
    await state.update_data(pil_size=pil_size, pil_count=pil_count)


    await message.answer(
        f'–í–∏ –æ–±—Ä–∞–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {pil_count} —à—Ç.'
    )


    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='1Ô∏è‚É£', callback_data=f'pay_method_1')],
            [types.InlineKeyboardButton(text='2Ô∏è‚É£', callback_data=f'pay_method_2')],
            [types.InlineKeyboardButton(text='3Ô∏è‚É£', callback_data=f'pay_method_3')],
        ]
    )

    await message.answer(
        """–¶—ñ–Ω–∞ —Ü—ñ—î—ó –ø–æ–¥—É—à–∫–∏ ‚Äî 1000 –≥—Ä–Ω.

–¢–µ–ø–µ—Ä –æ–±–∏—Ä–∞–π –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:
1Ô∏è‚É£ –ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É MonoPay.

2Ô∏è‚É£ –û–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫–∞.

3Ô∏è‚É£ –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ ‚Äì —Å–ø–ª–∞—á—É—î—à –ª–∏—à–µ –∑–∞–≤–¥–∞—Ç–æ–∫ —É —Ä–æ–∑–º—ñ—Ä—ñ 300 –≥—Ä–Ω, —Ä–µ—à—Ç—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ.

–û–±–∏—Ä–∞–π —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç, —ñ –≤–ø–µ—Ä–µ–¥ –¥–æ –º—Ä—ñ—ó! üòäüí≥üì¶""",
        reply_markup=inline_buttons
    )


@order_pil_handler_router.callback_query(F.data == 'pay_method_1')
async def pay_method_1(callback_query: types.CallbackQuery, state: FSMContext):
    await create_log(callback_query.message, "User have selected pay method 1")
    await callback_query.message.edit_reply_markup(reply_markup=None)

    pil_size  = (await state.get_data())["pil_size"]
    pil_count  = (await state.get_data())["pil_count"]

    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute("SELECT request_id FROM requests WHERE contact_id = %s ORDER BY request_id DESC LIMIT 1;",
                (
                    contact_id,
                )
            )
            
            pil_id=await db_cursor.fetchone()
            if pil_id!=None:
                pil_id=pil_id[0]
            else:
                return

    offer_url = await create_offer_url(pil_id, pil_size, pil_count, 1000, pil_count*1000)

    await callback_query.message.answer(
        f"""–î–∞–≤–∞–π –ø–µ—Ä–µ–π–¥–æ–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏ —Ç–∞ –≤–∏–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
–¢–∏—Ü—è–π –æ—Å—å —Ç—É—Ç —ñ –æ–ø–ª–∞—Ç–∏ –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ - {offer_url}"""
    )

    await state.clear()

    
    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute(
                """
                INSERT INTO orders(order_id, pil_size, pil_count, status)
                VALUES (%s, %s, %s, %s)
                """,
                (
                    pil_id,
                    pil_size,
                    pil_count,
                    "not confirmed"
                )
            )   
        await db_connector.commit()


@order_pil_handler_router.callback_query(F.data == 'pay_method_2')
async def pay_method_2(callback_query: types.CallbackQuery, state: FSMContext):
    await create_log(callback_query.message, "User have selected pay method 2")
    await callback_query.message.edit_reply_markup(reply_markup=None)

    pil_size  = (await state.get_data())["pil_size"]
    pil_count  = (await state.get_data())["pil_count"]


    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute("SELECT request_id FROM requests WHERE contact_id = %s ORDER BY request_id DESC LIMIT 1;",
                (
                    contact_id,
                )
            )
            
            pil_id=await db_cursor.fetchone()
            if pil_id!=None:
                pil_id=pil_id[0]
            else:
                return


    await callback_query.message.answer(
        f"""–î–ª—è —Å–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–π–¥–∏—Ç—å –≤ –≤–∞—à –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –¥–æ–¥–∞—Ç–æ–∫. –û–±–µ—Ä—ñ—Ç—å "–ü–ª–∞—Ç–µ–∂—ñ" —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –æ—Å—å —Ü–µ–π –Ω–æ–º–µ—Ä –Ω–∞—à–æ–≥–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –†–∞—Ö—É–Ω–∫—É (IBAN)
UA873354960000026007051605770

–ë—ñ–ª—å—à—ñ—Å—Ç—å –±–∞–Ω–∫—ñ–≤, –ø—ñ–¥—Ç—è–≥—É—î –∞–≤—Ç–æ–º–∞—Ç–æ–º –≤—Å—ñ —ñ–Ω—à—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏, –∞ —Å–∞–º–µ –Ñ–î–†–ü–û–£: 3019203120
—Ç–∞ –Ω–∞–∑–≤–∞ –§–û–ü: –§–û–ü –ö—Ä–∏–≤—É–ª—è–Ω—Å—å–∫–∞ –°. M.
—Ç–∞ –≤–∞–º –∑–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É –æ–ø–ª–∞—Ç–∏ —Ç–∞ –Ω–∞ —Å–∞–º–æ–º –∫—ñ–Ω—Ü—ñ –≤ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –≤–∫–∞–∑–∞—Ç–∏:–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {(8-len(f'{pil_id}'))*"0"+f'{pil_id}'}"""
    )

    await state.clear()
    
    
    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute(
                """
                INSERT INTO orders(order_id, pil_size, pil_count, status)
                VALUES (%s, %s, %s, %s)
                """,
                (
                    pil_id,
                    pil_size,
                    pil_count,
                    "requires confirmation"
                )
            ) 
        await db_connector.commit()


@order_pil_handler_router.callback_query(F.data == 'pay_method_3')
async def pay_method_3(callback_query: types.CallbackQuery, state: FSMContext):
    await create_log(callback_query.message, "User have selected pay method 3")

    pil_size  = (await state.get_data())["pil_size"]
    pil_count  = (await state.get_data())["pil_count"]

    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute("SELECT request_id FROM requests WHERE contact_id = %s ORDER BY request_id DESC LIMIT 1;",
                (
                    contact_id,
                )
            )
            
            pil_id=await db_cursor.fetchone()
            if pil_id!=None:
                pil_id=pil_id[0]
            else:
                return

    offer_url = await create_offer_url(pil_id, pil_size, pil_count, 1000, 300)

    await callback_query.message.answer(
        f"""–î–∞–≤–∞–π –ø–µ—Ä–µ–π–¥–æ–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏ –∑–∞–≤–¥–∞—Ç–∫–∞ –≤ 300–≥—Ä–Ω —Ç–∞ –≤–∏–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
–¢–∏—Ü—è–π –æ—Å—å —Ç—É—Ç —ñ –æ–ø–ª–∞—Ç–∏ –ª–µ–≥–∫–æ —ñ —à–≤–∏–¥–∫–æ - {offer_url}"""
    )

    await state.clear()

    
    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute(
                """
                INSERT INTO orders(order_id, pil_size, pil_count, status)
                VALUES (%s, %s, %s, %s)
                """,
                (
                    pil_id,
                    pil_size,
                    pil_count,
                    "not confirmed"
                )
            )
        await db_connector.commit()


@order_pil_handler_router.message(CommandStart(deep_link=True))
async def paid_order(message: types.Message, state: FSMContext, command: CommandObject) -> None:
    """
    Start bot, send welcome message

    Command: /start
    """
    pil_id = command.args

    if "paid_order_" in pil_id:
        await create_log(message, "User paid order")

        pil_id = pil_id.replace("paid_order_", "")

        async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
            async with await db_connector.cursor() as db_cursor:
                await db_cursor.execute(
                    """
                    UPDATE orders SET status=%s
                    WHERE order_id=%s
                    """,
                    (
                        "confirmed",
                        int(pil_id)
                    )
                )
            await db_connector.commit()

        await message.answer(
            f"""–î—è–∫—É—é –∑–∞ –æ–ø–ª–∞—Ç—É. 
–í–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä - {pil_id.zfill(8)}"""
        )