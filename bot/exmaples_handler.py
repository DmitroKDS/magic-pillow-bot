from aiogram import Router, types, F

from bot.functions.create_log import create_log
from bot.functions.get_work_time import get_work_time

import os

from mysql.connector.aio import connect
import config

from bot.functions.select_contact import select_contact


examples_handler_router = Router()


@examples_handler_router.message(lambda message: message.text == 'üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏')
async def examples(message: types.Message) -> None:
    """
    Give examples of the pillows, bot send examples of pillow or user can ask a question

    Button: about pil
    """
    await create_log(message, "examples")

    await message.answer(
        """üñº –û—Å—å –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –Ω–∞—à–∏—Ö –ø–æ–¥—É—à–æ–∫:"""
    )

    media = [types.InputMediaPhoto(media=types.FSInputFile(f"data/pil_examples/{image}")) for image in os.listdir("data/pil_examples/")]

    if media:
        await message.answer_media_group(
            media
        )

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='üåü –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—É—à–∫—É', callback_data='create_pil')],
            [types.InlineKeyboardButton(text='‚ùì –í –º–µ–Ω–µ —î –ø–∏—Ç–∞–Ω–Ω—è', callback_data='question_1')]
        ]
    )

    await message.answer(
        """‚ùì –°–ø–æ–¥–æ–±–∞–ª–∏—Å—è –ø—Ä–∏–∫–ª–∞–¥–∏?
‚úÖ –ú–æ–∂–µ–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—É—à–∫–∏?""",
        reply_markup=inline_buttons
    )


@examples_handler_router.callback_query(F.data.contains('question'))
async def question(callback_query: types.CallbackQuery) -> None:
    """
    Ask additional questions, bor check if can message to manager

    Button: additional questions pil
    """
    await create_log(callback_query.message, "question")

    is_work_time = get_work_time()

    contact_id = callback_query.message.chat.id
    question = {"1":'–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤', "2":'–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑ –ø—Ä–æ –ø–æ–¥—É—à–∫—É'}[callback_query.data.split('_')[-1]]
    contact = await select_contact(contact_id)

    if is_work_time:
        await callback_query.message.answer(
            f"""üöÄ –Ø –∑–∞—Ä–∞–∑ –ø–æ–∫–ª–∏—á—É –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {contact[0]} (+{contact[1]})! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏! üìû‚ú®"""
        )
    else:
        await callback_query.message.answer(
            f"""–ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥–ø–æ—á–∏–≤–∞—é—Ç—å. –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø'—è—Ç–Ω–∏—Ü—é –∑ 9 –¥–æ 18, –∞ —Ç–∞–∫–æ–∂ —É —Å—É–±–æ—Ç—É –∑ 10 –¥–æ 14. –¢–æ–º—É —Ç—Ä—ñ—à–∫–∏ –ø–æ—á–µ–∫–∞–π—Ç–µ  {contact[0]} (+{contact[1]}) —ñ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–º–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –∑–º–æ–∂–µ–º–æ :-)"""
        )


    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute("INSERT INTO messages(direct, message, contact_id) VALUES (%s, %s, %s)",
                (
                    'manager',
                    question,
                    contact_id
                )
            )
        await db_connector.commit()