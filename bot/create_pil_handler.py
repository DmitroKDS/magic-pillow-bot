import logging
from PIL import Image
import asyncio
import io
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bg_remove import bg_remove
from bg_remove.funcs.thumbnail import thumbnail
from mysql.connector.aio import connect
import mysql.connector
import config
from bot.functions.create_log import create_log
from bot.functions.get_work_time import get_work_time
from bot.functions.select_contact import select_contact

logging.basicConfig(level=logging.INFO)

class CreatePillowStates(StatesGroup):
    waiting_for_images = State()
    processing = State()

create_pil_handler_router = Router()

@create_pil_handler_router.message(lambda message: message.text == '‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—É—à–∫—É')
@create_pil_handler_router.callback_query(F.data == 'create_pil')
async def create_pil(message: types.Message | types.CallbackQuery, state: FSMContext) -> None:
    """
    Create pillow, bot send info about creating pillow

    Button: create pil
    """
    if isinstance(message, types.CallbackQuery):
        message = message.message

    await create_log(message, "create pil")
    
    # Initialize empty image list in state
    await state.update_data(images=[])
    
    await message.answer(
        """üîΩ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –¥—Ä—É–∫—É –Ω–∞ –ø–æ–¥—É—à—Ü—ñ.
        
–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
–Ø–∫—ñ—Å—Ç—å –±—É–¥–µ –∫—Ä–∞—â–∞, —è–∫—â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ñ—É–Ω–∫—Ü—ñ—î—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏, —è–∫ "–§–∞–π–ª" """
    )

    await state.set_state(CreatePillowStates.waiting_for_images)

@create_pil_handler_router.message(F.content_type.in_(['photo', 'document', 'sticker']), CreatePillowStates.waiting_for_images)
async def handle_image(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    images = state_data.get('images', [])
    
    pillow_image_io = io.BytesIO()
    
    # Save image to buffer
    if message.content_type == 'photo':
        await message.bot.download(message.photo[-1], destination=pillow_image_io)
        image_format = "png"
    elif message.content_type == 'document':
        await message.bot.download(message.document, destination=pillow_image_io)
        image_format = message.document.file_name.split(".")[-1]
    elif message.content_type == 'sticker':
        await message.bot.download(message.sticker, destination=pillow_image_io)
        image_format = "webp"
    
    if image_format not in ["png", "jpg", "jpeg", "webp", "heic"]:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ JPG, PNG –∞–±–æ JPEG")
        return
    
    images.append(pillow_image_io)
    await state.update_data(images=images)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ', callback_data='add_more_images')],
            [types.InlineKeyboardButton(text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —ñ –æ–±—Ä–æ–±–∏—Ç–∏', callback_data='process_images')]
        ]
    )
    
    await message.answer(
        f"‚ú® –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(images)} —Ñ–æ—Ç–æ. –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ?",
        reply_markup=keyboard
    )

@create_pil_handler_router.callback_query(F.data == 'process_images')
async def process_images(callback: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    images = state_data.get('images', [])
    
    processing_message = await callback.message.answer(
        f"‚è≥ –û–±—Ä–æ–±–ª—è—î–º–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å..."
    )
    
    try:
        # Create a semaphore to limit concurrent processing
        sem = asyncio.Semaphore(3)  # Limit to 3 concurrent operations
        
        async def process_with_semaphore(image_io, idx):
            async with sem:
                return await create_pil_operation(image_io, callback.message, state, idx + 1)
        
        # Process all images concurrently with semaphore
        tasks = [
            process_with_semaphore(image_io, idx)
            for idx, image_io in enumerate(images)
        ]
        
        # Use asyncio.gather to run all tasks concurrently
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # Filter out any failed results
        successful_results = [r for r in results if not isinstance(r, Exception)]
        
        if successful_results:
            # Send back processed images
            for result in successful_results:
                await send_processed_image(callback.message, result)
        else:
            await callback.message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logging.error(f"Error processing images: {e}")
        await callback.message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        await processing_message.delete()
        
async def create_pil_operation(image_io, message: types.Message, state: FSMContext, idx: int):
    """
    Handle user image and return image without background

    Handle: image or document
    """
    await create_log(message, f"create pil operation {idx}")

    contact_id = message.chat.id
    
    got_img = Image.open(image_io)
    logging.info("Opened image")

    await process_image_in_chunks(got_img, (300, 300))
    logging.info("Processed image in chunks")

    got_img_path = f"data/got_img/{contact_id}_{idx}.png"
    await asyncio.to_thread(got_img.save, got_img_path)
    logging.info(f"Saved got_img to {got_img_path}")

    await create_log(message, "got img saved")

    # Call bg_remove with the full URL
    result = await bg_remove(got_img, f"http://3059103.as563747.web.hosting-test.net/{got_img_path}")

    # Create preview
    pil_effect_img = result[1][0]  # Get the pil_effect image from the result
    preview_img = await asyncio.to_thread(thumbnail, pil_effect_img, (600, 600))

    preview_img_bytes = io.BytesIO()
    await asyncio.to_thread(preview_img.save, preview_img_bytes, format='PNG')
    preview_img_bytes.seek(0)

    return preview_img_bytes
async def send_processed_image(message: types.Message, preview_img_bytes: io.BytesIO):
    await message.answer_photo(
        types.BufferedInputFile(
            preview_img_bytes.read(),
            filename="preview.png"
        )
    )

    await create_log(message, "preview photo sent")

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='‚úÖ –¢–∞–∫, –≤—Å–µ —á—É–¥–æ–≤–æ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='order_pil')],
            [types.InlineKeyboardButton(text='‚ùå –ù—ñ, —â–æ—Å—å –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è. –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É', callback_data='do_not_like_pil')],
            [types.InlineKeyboardButton(text='üÜï –•–æ—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ', callback_data='create_pil')]
        ]
    )

    await message.answer(
        """üèÜ –û—Å—å, —â–æ –≤–∏–π—à–ª–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É.

‚ùî–ß–∏ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —Ç–∞–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç?

‚ÑπÔ∏è –ß–æ—Ä–Ω–∞ –ª—ñ–Ω—ñ—è —Ç–æ —î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç—É—Ä—É –ø–æ–¥—É—à–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤—ñ–π –ø–æ–¥—É—à—Ü—ñ —ó—Ö –Ω–µ –±—É–¥–µ.""",
        reply_markup=inline_buttons
    )

async def process_image_in_chunks(image, chunk_size=(300, 300)):
    width, height = image.size
    for x in range(0, width, chunk_size[0]):
        for y in range(0, height, chunk_size[1]):
            box = (x, y, x + chunk_size[0], y + chunk_size[1])
            chunk = image.crop(box)
            # Process the chunk (e.g., apply thumbnail, save, etc.)
            chunk = await asyncio.to_thread(thumbnail, chunk, chunk_size)
            chunk_path = f"data/got_img/chunk_{x}_{y}.png"
            await asyncio.to_thread(chunk.save, chunk_path)
            logging.info(f"Processed and saved chunk at {chunk_path}")
            # Release memory
            del chunk

@create_pil_handler_router.callback_query(F.data == 'do_not_like_pil')
async def do_not_like_pil(callback_query: types.CallbackQuery, state: FSMContext):
    """
    In user mind pil is wrong. Bot offer a help

    Button: pil not okay
    """
    await create_log(callback_query.message, "Do not like pil")


    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ù–∞ –º–∞–∫–µ—Ç—ñ –ø–æ–¥—É—à–∫–∏ –∑–∞–π–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç', callback_data='miss_element')],
            [types.InlineKeyboardButton(text='–Ü–Ω—à–µ', callback_data='other')],
            [types.InlineKeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥', callback_data='your_mind')]
        ]
    )

    await callback_query.message.answer(
        """ü§î –©–æ —Å–∞–º–µ –≤–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å? –ú–∏ –∑—Ä–æ–±–∏–º–æ –≤—Å–µ, —â–æ–± –≤–∞—à–∞ –ø–æ–¥—É—à–∫–∞ –±—É–ª–∞ –¢–û–ü! üí™‚ú®""",
        reply_markup=inline_buttons
    )


@create_pil_handler_router.callback_query(F.data == 'miss_element')
async def miss_element(callback_query: types.CallbackQuery):
    """
    In user mind element is missing. Bot offer a help

    Button: miss element
    """
    await create_log(callback_query.message, "miss element")

    is_work_time = get_work_time()

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ß–µ–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å', callback_data='wait_for_answer')],
            [types.InlineKeyboardButton(text='üîÑ –•–æ—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ üì∏', callback_data='create_pil')]
        ]
    )

    if is_work_time:
        await callback_query.message.answer(
            """üòä –û–≥–æ, –Ω–∞ —â–∞—Å—Ç—è –Ω–µ –≤—Å–µ –∑–∞—Ö–æ–ø–∏–≤ —â–µ –®—Ç—É—á–Ω–∏–π —Ä–∞–∑—É–º!
–Ø –≤–∂–µ –ø–µ—Ä–µ–¥–∞—é –Ω–∞—à–æ–º—É –¥–∏–∑–∞–π–Ω–µ—Ä—É, —â–æ–± –≤—ñ–Ω –ø–æ–¥–∏–≤–∏–≤—Å—è –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ üëÄ. –í—ñ–Ω –≤–∏—Ä—ñ—à–∏—Ç—å, —á–∏ –∑–º–æ–∂–µ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤–µ. ‚úçÔ∏èüé®""",
            reply_markup=inline_buttons
        )
    else:
        await callback_query.message.answer(
            """üòä –û–≥–æ, –Ω–∞ —â–∞—Å—Ç—è –Ω–µ –≤—Å–µ –∑–∞—Ö–æ–ø–∏–≤ —â–µ –®—Ç—É—á–Ω–∏–π —Ä–∞–∑—É–º!
–Ø –ø–µ—Ä–µ–¥–∞–º –Ω–∞—à–æ–º—É –¥–∏–∑–∞–π–Ω–µ—Ä—É, —â–æ–± –≤—ñ–Ω –ø–æ–¥–∏–≤–∏–≤—Å—è –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ üëÄ. –í—ñ–Ω –≤–∏—Ä—ñ—à–∏—Ç—å, —á–∏ –∑–º–æ–∂–µ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤–µ.
–ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –∑–∞—Ä–∞–∑ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î. –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø'—è—Ç–Ω–∏—Ü—é –∑ 9 –¥–æ 18, –∞ —Ç–∞–∫–æ–∂ —É —Å—É–±–æ—Ç—É –∑ 10 –¥–æ 14. –í—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –∑—Ä–∞–∑—É, —è–∫ –±—É–¥–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å. ‚úçÔ∏èüé®""",
            reply_markup=inline_buttons
        )


    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_connector.cursor() as db_cursor:
            await db_cursor.execute("SELECT request_id FROM requests WHERE contact_id = %s ORDER BY request_id DESC LIMIT 1;",
                (
                    contact_id,
                )
            )
            
            pil_id=await db_cursor.fetchone()
            if pil_id!=None:
                pil_id=pil_id[0]
            else:
                return
            

            await db_cursor.execute("INSERT INTO messages(direct, message, contact_id, pil_id) VALUES (%s, %s, %s, %s)",
                (
                    'designer',
                    '–ó–∞–π–≤—ñ –¥–µ—Ç–∞–ª—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—ñ',
                    contact_id,
                    pil_id
                )
            )
        await db_connector.commit()



@create_pil_handler_router.callback_query(F.data == 'other')
async def other(callback_query: types.CallbackQuery):
    """
    Choose other problem

    Button: other problem
    """
    await create_log(callback_query.message, "Other")


    contact_id = callback_query.message.chat.id
    contact = await select_contact(contact_id)
    if contact is None:
        return

    is_work_time = get_work_time()

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ß–µ–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å', callback_data='wait_for_answer')],
            [types.InlineKeyboardButton(text='üîÑ –•–æ—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ üì∏', callback_data='create_pil')]
        ]
    )

    if is_work_time:
        await callback_query.message.answer(
            f"""–Ø –≤–∂–µ –ø–µ—Ä–µ–¥–∞—é —Å–∫–∞—Ä–≥—É –¥–∏–∑–∞–π–Ω–µ—Ä—É {contact[0]} (+{contact[1]}), —ñ –≤—ñ–Ω —É—Å–µ –ø–µ—Ä–µ–≥–ª—è–Ω–µ —Ç–∞ –ø–æ—Å—Ç–∞—Ä–∞—î—Ç—å—Å—è –∑–Ω–∞–π—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –≤–∞—Å. üòâ


üì© –ú–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏, —è–∫ —Ç—ñ–ª—å–∫–∏ –¥–∏–∑–∞–π–Ω–µ—Ä –≤—Å–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å! üí¨""",
            reply_markup=inline_buttons
        )
    else:
        await callback_query.message.answer(
            f"""–Ø –ø–µ—Ä–µ–¥–∞–º —Å–∫–∞—Ä–≥—É –¥–∏–∑–∞–π–Ω–µ—Ä—É {contact[0]} (+{contact[1]}) üñåÔ∏è, —ñ –≤—ñ–Ω —É—Å–µ –ø–µ—Ä–µ–≥–ª—è–Ω–µ —Ç–∞ –ø–æ—Å—Ç–∞—Ä–∞—î—Ç—å—Å—è –∑–Ω–∞–π—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –≤–∞—Å. üòâ


üìÖ –ù–∞—à –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:
–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ø‚Äô—è—Ç–Ω–∏—Ü—è: 09:00 ‚Äì 18:00
–°—É–±–æ—Ç–∞: 10:00 ‚Äì 14:00
–ù–µ–¥—ñ–ª—è ‚Äì –∑–∞—Å–ª—É–∂–µ–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. üòä

üì© –ú–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏, —è–∫ —Ç—ñ–ª—å–∫–∏ –¥–∏–∑–∞–π–Ω–µ—Ä –≤—Å–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å! üí¨""",
            reply_markup=inline_buttons
        )


    contact_id = callback_query.message.chat.id

    async with await connect(host=config.HOST, user=config.USER, password=config.PASSWORD, database=config.DB) as db_connector:
        async with await db_cursor.cursor() as db_cursor:
            await db_cursor.execute("SELECT request_id FROM requests WHERE contact_id = %s ORDER BY request_id DESC LIMIT 1;",
                (
                    contact_id,
                )
            )
            
            pil_id=await db_cursor.fetchone()
            if pil_id!=None:
                pil_id=pil_id[0]
            else:
                return
            

            await db_cursor.execute("INSERT INTO messages(direct, message, contact_id, pil_id) VALUES (%s, %s, %s, %s)",
                (
                    'designer',
                    '–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º',
                    contact_id,
                    pil_id
                )
            )
        await db_connector.commit()



@create_pil_handler_router.callback_query(F.data == 'your_mind')
async def your_mind(callback_query: types.CallbackQuery):
    """
    User mind

    Button: your mind
    """
    await create_log(callback_query.message, "your_mind")

    inline_buttons = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='‚úÖ –¢–∞–∫, —É—Å–µ —á—É–¥–æ–≤–æ‚ú®', callback_data='order_pil')],
            [types.InlineKeyboardButton(text='‚ùå –ù—ñ, —â–æ—Å—å –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è‚ú®', callback_data='pil_is_wrong')],
            [types.InlineKeyboardButton(text='üîÑ –•–æ—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ üì∏', callback_data='create_pil')]
        ]
    )

    await callback_query.message.answer(
        """–ß–∏ –≤—Å–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤–∞–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ?""",
        reply_markup=inline_buttons
    )